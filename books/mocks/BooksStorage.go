// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	books "github.com/bookstore/books"

	mock "github.com/stretchr/testify/mock"
)

// BooksStorage is an autogenerated mock type for the BooksStorage type
type BooksStorage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, title, author, issue, pages
func (_m *BooksStorage) Create(ctx context.Context, title string, author string, issue string, pages int) error {
	ret := _m.Called(ctx, title, author, issue, pages)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = rf(ctx, title, author, issue, pages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BooksStorage) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *BooksStorage) GetByID(ctx context.Context, id int64) (books.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 books.Book
	if rf, ok := ret.Get(0).(func(context.Context, int64) books.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(books.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx
func (_m *BooksStorage) ListAll(ctx context.Context) ([]books.Book, error) {
	ret := _m.Called(ctx)

	var r0 []books.Book
	if rf, ok := ret.Get(0).(func(context.Context) []books.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, author, title, issue, string, pages
func (_m *BooksStorage) Update(ctx context.Context, id int64, author int, title int, issue int, string int, pages int) error {
	ret := _m.Called(ctx, id, author, title, issue, string, pages)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, int, int, int) error); ok {
		r0 = rf(ctx, id, author, title, issue, string, pages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
